// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common/v1/info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Direction is the direction of a stream.
enum Sonrio_Motor_Common_V1_Direction: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Unspecified is the default value.
  case unspecified // = 0

  /// Incoming is the direction of an incoming stream.
  case incoming // = 1

  /// Outgoing is the direction of an outgoing stream.
  case outgoing // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .incoming
    case 2: self = .outgoing
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .incoming: return 1
    case .outgoing: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sonrio_Motor_Common_V1_Direction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sonrio_Motor_Common_V1_Direction] = [
    .unspecified,
    .incoming,
    .outgoing,
  ]
}

#endif  // swift(>=4.2)

/// Standard MIME with Additional Extensions
struct Sonrio_Motor_Common_V1_MIME {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of File
  var type: Sonrio_Motor_Common_V1_MIME.TypeEnum = .unspecified

  /// Extension of File
  var subtype: String = String()

  /// Type/Subtype i.e. (image/jpeg)
  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// File Content Type
  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Other File Type - If cannot derive from Subtype
    case unspecified // = 0

    /// Sound, Audio Files
    case audio // = 1

    /// Document Files - PDF, Word, Excel, etc.
    case document // = 2

    /// Image Files
    case image // = 3

    /// Text Based Files
    case text // = 4

    /// Video Files
    case video // = 5

    /// URL Links
    case url // = 6

    /// Crypto Files
    case crypto // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .audio
      case 2: self = .document
      case 3: self = .image
      case 4: self = .text
      case 5: self = .video
      case 6: self = .url
      case 7: self = .crypto
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .audio: return 1
      case .document: return 2
      case .image: return 3
      case .text: return 4
      case .video: return 5
      case .url: return 6
      case .crypto: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Sonrio_Motor_Common_V1_MIME.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sonrio_Motor_Common_V1_MIME.TypeEnum] = [
    .unspecified,
    .audio,
    .document,
    .image,
    .text,
    .video,
    .url,
    .crypto,
  ]
}

#endif  // swift(>=4.2)

/// Basic Info Sent to Peers to Establish Connections
struct Sonrio_Motor_Common_V1_Peer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User Sonr Domain
  var did: String = String()

  /// Peer Status
  var status: Sonrio_Motor_Common_V1_Peer.Status = .unspecified

  /// Peer Device Info
  var device: Sonrio_Motor_Common_V1_Peer.Device {
    get {return _device ?? Sonrio_Motor_Common_V1_Peer.Device()}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {self._device = nil}

  /// Public Key of the Peer
  var publicKey: Data = Data()

  /// Last Modified Timestamp
  var lastModified: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Peers Active Status
  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Offline - Not Online or Not a Full Node
    case unspecified // = 0

    /// Online - Full Node Available
    case online // = 1

    /// Away - Not Online, but has a full node
    case away // = 2

    /// Busy - Online, but busy with Transfer
    case busy // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .online
      case 2: self = .away
      case 3: self = .busy
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .online: return 1
      case .away: return 2
      case .busy: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Peer Info for Device
  struct Device {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Peer Device ID
    var id: String = String()

    /// Peer Host Name
    var hostName: String = String()

    /// Peer Operating System
    var os: String = String()

    /// Peer Architecture
    var arch: String = String()

    /// Peers Device Model
    var model: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _device: Sonrio_Motor_Common_V1_Peer.Device? = nil
}

#if swift(>=4.2)

extension Sonrio_Motor_Common_V1_Peer.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sonrio_Motor_Common_V1_Peer.Status] = [
    .unspecified,
    .online,
    .away,
    .busy,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Sonrio_Motor_Common_V1_Direction: @unchecked Sendable {}
extension Sonrio_Motor_Common_V1_MIME: @unchecked Sendable {}
extension Sonrio_Motor_Common_V1_MIME.TypeEnum: @unchecked Sendable {}
extension Sonrio_Motor_Common_V1_Peer: @unchecked Sendable {}
extension Sonrio_Motor_Common_V1_Peer.Status: @unchecked Sendable {}
extension Sonrio_Motor_Common_V1_Peer.Device: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sonrio.motor.common.v1"

extension Sonrio_Motor_Common_V1_Direction: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DIRECTION_UNSPECIFIED"),
    1: .same(proto: "DIRECTION_INCOMING"),
    2: .same(proto: "DIRECTION_OUTGOING"),
  ]
}

extension Sonrio_Motor_Common_V1_MIME: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MIME"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "subtype"),
    3: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subtype) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.subtype.isEmpty {
      try visitor.visitSingularStringField(value: self.subtype, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Common_V1_MIME, rhs: Sonrio_Motor_Common_V1_MIME) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.subtype != rhs.subtype {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Common_V1_MIME.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "TYPE_AUDIO"),
    2: .same(proto: "TYPE_DOCUMENT"),
    3: .same(proto: "TYPE_IMAGE"),
    4: .same(proto: "TYPE_TEXT"),
    5: .same(proto: "TYPE_VIDEO"),
    6: .same(proto: "TYPE_URL"),
    7: .same(proto: "TYPE_CRYPTO"),
  ]
}

extension Sonrio_Motor_Common_V1_Peer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Peer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "did"),
    2: .same(proto: "status"),
    3: .same(proto: "device"),
    4: .standard(proto: "public_key"),
    6: .standard(proto: "last_modified"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.did) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._device) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.did.isEmpty {
      try visitor.visitSingularStringField(value: self.did, fieldNumber: 1)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try { if let v = self._device {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 4)
    }
    if self.lastModified != 0 {
      try visitor.visitSingularInt64Field(value: self.lastModified, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Common_V1_Peer, rhs: Sonrio_Motor_Common_V1_Peer) -> Bool {
    if lhs.did != rhs.did {return false}
    if lhs.status != rhs.status {return false}
    if lhs._device != rhs._device {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.lastModified != rhs.lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Common_V1_Peer.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSPECIFIED"),
    1: .same(proto: "STATUS_ONLINE"),
    2: .same(proto: "STATUS_AWAY"),
    3: .same(proto: "STATUS_BUSY"),
  ]
}

extension Sonrio_Motor_Common_V1_Peer.Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Sonrio_Motor_Common_V1_Peer.protoMessageName + ".Device"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "host_name"),
    3: .same(proto: "os"),
    4: .same(proto: "arch"),
    5: .same(proto: "model"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hostName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.os) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.arch) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.model) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.hostName.isEmpty {
      try visitor.visitSingularStringField(value: self.hostName, fieldNumber: 2)
    }
    if !self.os.isEmpty {
      try visitor.visitSingularStringField(value: self.os, fieldNumber: 3)
    }
    if !self.arch.isEmpty {
      try visitor.visitSingularStringField(value: self.arch, fieldNumber: 4)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Common_V1_Peer.Device, rhs: Sonrio_Motor_Common_V1_Peer.Device) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.hostName != rhs.hostName {return false}
    if lhs.os != rhs.os {return false}
    if lhs.arch != rhs.arch {return false}
    if lhs.model != rhs.model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
