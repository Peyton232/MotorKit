// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/v1/request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// -----------------------------------------------------------------------------
/// Motor Node API
/// -----------------------------------------------------------------------------
/// (Client) InitializeRequest Message to Establish Sonr Host/API/Room
struct Sonrio_Motor_Api_V1_InitializeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Identifier of this Device
  var deviceID: String = String()

  /// Device Home Directory
  var homeDir: String = String()

  /// Device Library Support Directory
  var supportDir: String = String()

  /// Device Temporary Storage Directory
  var tempDir: String = String()

  /// Libp2p Host config
  var hostOptions: Sonrio_Motor_Api_V1_InitializeRequest.HostOptions {
    get {return _hostOptions ?? Sonrio_Motor_Api_V1_InitializeRequest.HostOptions()}
    set {_hostOptions = newValue}
  }
  /// Returns true if `hostOptions` has been explicitly set.
  var hasHostOptions: Bool {return self._hostOptions != nil}
  /// Clears the value of `hostOptions`. Subsequent reads from it will return its default value.
  mutating func clearHostOptions() {self._hostOptions = nil}

  /// Public Key used for Device Authentication as DID Controller
  var deviceKeyprintPub: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Libp2p Host Options
  struct HostOptions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Enable QUIC Transport
    var quicTransport: Bool = false

    /// Enable HTTP Transport
    var httpTransport: Bool = false

    /// Enable IPv4 Only
    var ipv4Only: Bool = false

    /// List of Listen Addresses (optional)
    var listenAddrs: [Sonrio_Motor_Api_V1_InitializeRequest.IPAddress] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  /// IP Address Interface
  struct IPAddress {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Name of Interface
    var name: String = String()

    /// IP Address of Interface
    var address: String = String()

    /// Wether it is a Loopback Interface
    var `internal`: Bool = false

    /// Address Family
    var family: Sonrio_Motor_Api_V1_InitializeRequest.IPAddress.Family = .unspecified

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Type of IP Interface
    enum Family: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case unspecified // = 0

      /// IPv4 Address
      case ipv4 // = 1

      /// IPv6 Address
      case ipv6 // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .unspecified
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .ipv4
        case 2: self = .ipv6
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .ipv4: return 1
        case .ipv6: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}
  }

  init() {}

  fileprivate var _hostOptions: Sonrio_Motor_Api_V1_InitializeRequest.HostOptions? = nil
}

#if swift(>=4.2)

extension Sonrio_Motor_Api_V1_InitializeRequest.IPAddress.Family: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sonrio_Motor_Api_V1_InitializeRequest.IPAddress.Family] = [
    .unspecified,
    .ipv4,
    .ipv6,
  ]
}

#endif  // swift(>=4.2)

/// CreateAccount Request contains the three keys needed to create an account on Sonr
struct Sonrio_Motor_Api_V1_CreateAccountRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var password: String = String()

  var aesDscKey: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sonrio_Motor_Api_V1_InitializeRequest: @unchecked Sendable {}
extension Sonrio_Motor_Api_V1_InitializeRequest.HostOptions: @unchecked Sendable {}
extension Sonrio_Motor_Api_V1_InitializeRequest.IPAddress: @unchecked Sendable {}
extension Sonrio_Motor_Api_V1_InitializeRequest.IPAddress.Family: @unchecked Sendable {}
extension Sonrio_Motor_Api_V1_CreateAccountRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sonrio.motor.api.v1"

extension Sonrio_Motor_Api_V1_InitializeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InitializeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .standard(proto: "home_dir"),
    3: .standard(proto: "support_dir"),
    4: .standard(proto: "temp_dir"),
    5: .standard(proto: "host_options"),
    6: .standard(proto: "device_keyprint_pub"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.homeDir) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.supportDir) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tempDir) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._hostOptions) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.deviceKeyprintPub) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.homeDir.isEmpty {
      try visitor.visitSingularStringField(value: self.homeDir, fieldNumber: 2)
    }
    if !self.supportDir.isEmpty {
      try visitor.visitSingularStringField(value: self.supportDir, fieldNumber: 3)
    }
    if !self.tempDir.isEmpty {
      try visitor.visitSingularStringField(value: self.tempDir, fieldNumber: 4)
    }
    try { if let v = self._hostOptions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.deviceKeyprintPub.isEmpty {
      try visitor.visitSingularBytesField(value: self.deviceKeyprintPub, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Api_V1_InitializeRequest, rhs: Sonrio_Motor_Api_V1_InitializeRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.homeDir != rhs.homeDir {return false}
    if lhs.supportDir != rhs.supportDir {return false}
    if lhs.tempDir != rhs.tempDir {return false}
    if lhs._hostOptions != rhs._hostOptions {return false}
    if lhs.deviceKeyprintPub != rhs.deviceKeyprintPub {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Api_V1_InitializeRequest.HostOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Sonrio_Motor_Api_V1_InitializeRequest.protoMessageName + ".HostOptions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "quic_transport"),
    2: .standard(proto: "http_transport"),
    3: .standard(proto: "ipv4_only"),
    4: .standard(proto: "listen_addrs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.quicTransport) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.httpTransport) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.ipv4Only) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.listenAddrs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.quicTransport != false {
      try visitor.visitSingularBoolField(value: self.quicTransport, fieldNumber: 1)
    }
    if self.httpTransport != false {
      try visitor.visitSingularBoolField(value: self.httpTransport, fieldNumber: 2)
    }
    if self.ipv4Only != false {
      try visitor.visitSingularBoolField(value: self.ipv4Only, fieldNumber: 3)
    }
    if !self.listenAddrs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listenAddrs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Api_V1_InitializeRequest.HostOptions, rhs: Sonrio_Motor_Api_V1_InitializeRequest.HostOptions) -> Bool {
    if lhs.quicTransport != rhs.quicTransport {return false}
    if lhs.httpTransport != rhs.httpTransport {return false}
    if lhs.ipv4Only != rhs.ipv4Only {return false}
    if lhs.listenAddrs != rhs.listenAddrs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Api_V1_InitializeRequest.IPAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Sonrio_Motor_Api_V1_InitializeRequest.protoMessageName + ".IPAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "address"),
    3: .same(proto: "internal"),
    4: .same(proto: "family"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.`internal`) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.family) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if self.`internal` != false {
      try visitor.visitSingularBoolField(value: self.`internal`, fieldNumber: 3)
    }
    if self.family != .unspecified {
      try visitor.visitSingularEnumField(value: self.family, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Api_V1_InitializeRequest.IPAddress, rhs: Sonrio_Motor_Api_V1_InitializeRequest.IPAddress) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.address != rhs.address {return false}
    if lhs.`internal` != rhs.`internal` {return false}
    if lhs.family != rhs.family {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Api_V1_InitializeRequest.IPAddress.Family: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FAMILY_UNSPECIFIED"),
    1: .same(proto: "FAMILY_IPV4"),
    2: .same(proto: "FAMILY_IPV6"),
  ]
}

extension Sonrio_Motor_Api_V1_CreateAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAccountRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "password"),
    2: .standard(proto: "aes_dsc_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.aesDscKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 1)
    }
    if !self.aesDscKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.aesDscKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Api_V1_CreateAccountRequest, rhs: Sonrio_Motor_Api_V1_CreateAccountRequest) -> Bool {
    if lhs.password != rhs.password {return false}
    if lhs.aesDscKey != rhs.aesDscKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
