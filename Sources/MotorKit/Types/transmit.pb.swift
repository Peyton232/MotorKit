// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: service/v1/transmit.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// For Transfer File Payload
struct Sonrio_Motor_Service_V1_FileItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Standard Mime Type
  var mime: Sonrio_Motor_Common_V1_MIME {
    get {return _mime ?? Sonrio_Motor_Common_V1_MIME()}
    set {_mime = newValue}
  }
  /// Returns true if `mime` has been explicitly set.
  var hasMime: Bool {return self._mime != nil}
  /// Clears the value of `mime`. Subsequent reads from it will return its default value.
  mutating func clearMime() {self._mime = nil}

  /// File Name without Path
  var name: String = String()

  /// File Location
  var path: String = String()

  /// File Size in Bytes
  var size: Int64 = 0

  /// Thumbnail of File
  var thumbnail: Sonrio_Motor_Service_V1_Thumbnail {
    get {return _thumbnail ?? Sonrio_Motor_Service_V1_Thumbnail()}
    set {_thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
  var hasThumbnail: Bool {return self._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
  mutating func clearThumbnail() {self._thumbnail = nil}

  /// Last Modified Time in Seconds
  var lastModified: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mime: Sonrio_Motor_Common_V1_MIME? = nil
  fileprivate var _thumbnail: Sonrio_Motor_Service_V1_Thumbnail? = nil
}

/// Payload is Data thats being Passed
struct Sonrio_Motor_Service_V1_Payload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Payload Items
  var items: [Sonrio_Motor_Service_V1_Payload.Item] = []

  /// PROFILE: General Sender Info
  var owner: Sonrio_Motor_Common_V1_Peer {
    get {return _owner ?? Sonrio_Motor_Common_V1_Peer()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  mutating func clearOwner() {self._owner = nil}

  /// Payload Size in Bytes
  var size: Int64 = 0

  /// Payload Creation Time in Seconds
  var createdAt: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Item in Payload
  struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// MIME of the Item
    var mime: Sonrio_Motor_Common_V1_MIME {
      get {return _storage._mime ?? Sonrio_Motor_Common_V1_MIME()}
      set {_uniqueStorage()._mime = newValue}
    }
    /// Returns true if `mime` has been explicitly set.
    var hasMime: Bool {return _storage._mime != nil}
    /// Clears the value of `mime`. Subsequent reads from it will return its default value.
    mutating func clearMime() {_uniqueStorage()._mime = nil}

    /// Size of the Item in Bytes
    var size: Int64 {
      get {return _storage._size}
      set {_uniqueStorage()._size = newValue}
    }

    /// Attached Data
    var data: OneOf_Data? {
      get {return _storage._data}
      set {_uniqueStorage()._data = newValue}
    }

    /// FILE: File Item
    var file: Sonrio_Motor_Service_V1_FileItem {
      get {
        if case .file(let v)? = _storage._data {return v}
        return Sonrio_Motor_Service_V1_FileItem()
      }
      set {_uniqueStorage()._data = .file(newValue)}
    }

    /// URL: Url Item
    var url: String {
      get {
        if case .url(let v)? = _storage._data {return v}
        return String()
      }
      set {_uniqueStorage()._data = .url(newValue)}
    }

    /// MESSAGE: Message Item
    var message: String {
      get {
        if case .message(let v)? = _storage._data {return v}
        return String()
      }
      set {_uniqueStorage()._data = .message(newValue)}
    }

    /// Thumbnail of the Item
    var thumbnail: Sonrio_Motor_Service_V1_Thumbnail {
      get {return _storage._thumbnail ?? Sonrio_Motor_Service_V1_Thumbnail()}
      set {_uniqueStorage()._thumbnail = newValue}
    }
    /// Returns true if `thumbnail` has been explicitly set.
    var hasThumbnail: Bool {return _storage._thumbnail != nil}
    /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
    mutating func clearThumbnail() {_uniqueStorage()._thumbnail = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Attached Data
    enum OneOf_Data: Equatable {
      /// FILE: File Item
      case file(Sonrio_Motor_Service_V1_FileItem)
      /// URL: Url Item
      case url(String)
      /// MESSAGE: Message Item
      case message(String)

    #if !swift(>=4.1)
      static func ==(lhs: Sonrio_Motor_Service_V1_Payload.Item.OneOf_Data, rhs: Sonrio_Motor_Service_V1_Payload.Item.OneOf_Data) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.file, .file): return {
          guard case .file(let l) = lhs, case .file(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.url, .url): return {
          guard case .url(let l) = lhs, case .url(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.message, .message): return {
          guard case .message(let l) = lhs, case .message(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _owner: Sonrio_Motor_Common_V1_Peer? = nil
}

/// SupplyItem is an item supplied to be a payload
struct Sonrio_Motor_Service_V1_SupplyItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Supply Path
  var path: String = String()

  /// Supply Path of the Thumbnail
  var thumbnail: Data {
    get {return _thumbnail ?? Data()}
    set {_thumbnail = newValue}
  }
  /// Returns true if `thumbnail` has been explicitly set.
  var hasThumbnail: Bool {return self._thumbnail != nil}
  /// Clears the value of `thumbnail`. Subsequent reads from it will return its default value.
  mutating func clearThumbnail() {self._thumbnail = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _thumbnail: Data? = nil
}

/// Thumbnail of File
struct Sonrio_Motor_Service_V1_Thumbnail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Thumbnail Buffer
  var buffer: Data = Data()

  /// Mime Type
  var mime: Sonrio_Motor_Common_V1_MIME {
    get {return _mime ?? Sonrio_Motor_Common_V1_MIME()}
    set {_mime = newValue}
  }
  /// Returns true if `mime` has been explicitly set.
  var hasMime: Bool {return self._mime != nil}
  /// Clears the value of `mime`. Subsequent reads from it will return its default value.
  mutating func clearMime() {self._mime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mime: Sonrio_Motor_Common_V1_MIME? = nil
}

struct Sonrio_Motor_Service_V1_Session {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var direction: Sonrio_Motor_Common_V1_Direction {
    get {return _storage._direction}
    set {_uniqueStorage()._direction = newValue}
  }

  var from: Sonrio_Motor_Common_V1_Peer {
    get {return _storage._from ?? Sonrio_Motor_Common_V1_Peer()}
    set {_uniqueStorage()._from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  var hasFrom: Bool {return _storage._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  mutating func clearFrom() {_uniqueStorage()._from = nil}

  var to: Sonrio_Motor_Common_V1_Peer {
    get {return _storage._to ?? Sonrio_Motor_Common_V1_Peer()}
    set {_uniqueStorage()._to = newValue}
  }
  /// Returns true if `to` has been explicitly set.
  var hasTo: Bool {return _storage._to != nil}
  /// Clears the value of `to`. Subsequent reads from it will return its default value.
  mutating func clearTo() {_uniqueStorage()._to = nil}

  var payload: Sonrio_Motor_Service_V1_Payload {
    get {return _storage._payload ?? Sonrio_Motor_Service_V1_Payload()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating func clearPayload() {_uniqueStorage()._payload = nil}

  var lastUpdated: Int64 {
    get {return _storage._lastUpdated}
    set {_uniqueStorage()._lastUpdated = newValue}
  }

  var items: [Sonrio_Motor_Service_V1_SessionItem] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  var currentIndex: Int32 {
    get {return _storage._currentIndex}
    set {_uniqueStorage()._currentIndex = newValue}
  }

  var results: Dictionary<Int32,Bool> {
    get {return _storage._results}
    set {_uniqueStorage()._results = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Sonrio_Motor_Service_V1_SessionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var index: Int32 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  var count: Int32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  var item: Sonrio_Motor_Service_V1_FileItem {
    get {return _storage._item ?? Sonrio_Motor_Service_V1_FileItem()}
    set {_uniqueStorage()._item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  var hasItem: Bool {return _storage._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  mutating func clearItem() {_uniqueStorage()._item = nil}

  var written: Int64 {
    get {return _storage._written}
    set {_uniqueStorage()._written = newValue}
  }

  var size: Int64 {
    get {return _storage._size}
    set {_uniqueStorage()._size = newValue}
  }

  var totalSize: Int64 {
    get {return _storage._totalSize}
    set {_uniqueStorage()._totalSize = newValue}
  }

  var direction: Sonrio_Motor_Common_V1_Direction {
    get {return _storage._direction}
    set {_uniqueStorage()._direction = newValue}
  }

  var path: String {
    get {return _storage._path}
    set {_uniqueStorage()._path = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Sonrio_Motor_Service_V1_SessionPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Sonrio_Motor_Service_V1_Payload {
    get {return _payload ?? Sonrio_Motor_Service_V1_Payload()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating func clearPayload() {self._payload = nil}

  var direction: Sonrio_Motor_Common_V1_Direction = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _payload: Sonrio_Motor_Service_V1_Payload? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Sonrio_Motor_Service_V1_FileItem: @unchecked Sendable {}
extension Sonrio_Motor_Service_V1_Payload: @unchecked Sendable {}
extension Sonrio_Motor_Service_V1_Payload.Item: @unchecked Sendable {}
extension Sonrio_Motor_Service_V1_Payload.Item.OneOf_Data: @unchecked Sendable {}
extension Sonrio_Motor_Service_V1_SupplyItem: @unchecked Sendable {}
extension Sonrio_Motor_Service_V1_Thumbnail: @unchecked Sendable {}
extension Sonrio_Motor_Service_V1_Session: @unchecked Sendable {}
extension Sonrio_Motor_Service_V1_SessionItem: @unchecked Sendable {}
extension Sonrio_Motor_Service_V1_SessionPayload: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sonrio.motor.service.v1"

extension Sonrio_Motor_Service_V1_FileItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mime"),
    2: .same(proto: "name"),
    3: .same(proto: "path"),
    4: .same(proto: "size"),
    5: .same(proto: "thumbnail"),
    6: .standard(proto: "last_modified"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._mime) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.size) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._thumbnail) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 4)
    }
    try { if let v = self._thumbnail {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.lastModified != 0 {
      try visitor.visitSingularInt64Field(value: self.lastModified, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Service_V1_FileItem, rhs: Sonrio_Motor_Service_V1_FileItem) -> Bool {
    if lhs._mime != rhs._mime {return false}
    if lhs.name != rhs.name {return false}
    if lhs.path != rhs.path {return false}
    if lhs.size != rhs.size {return false}
    if lhs._thumbnail != rhs._thumbnail {return false}
    if lhs.lastModified != rhs.lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Service_V1_Payload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Payload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
    2: .same(proto: "owner"),
    3: .same(proto: "size"),
    4: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.size) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 3)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Service_V1_Payload, rhs: Sonrio_Motor_Service_V1_Payload) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs.size != rhs.size {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Service_V1_Payload.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Sonrio_Motor_Service_V1_Payload.protoMessageName + ".Item"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mime"),
    2: .same(proto: "size"),
    3: .same(proto: "file"),
    4: .same(proto: "url"),
    5: .same(proto: "message"),
    6: .same(proto: "thumbnail"),
  ]

  fileprivate class _StorageClass {
    var _mime: Sonrio_Motor_Common_V1_MIME? = nil
    var _size: Int64 = 0
    var _data: Sonrio_Motor_Service_V1_Payload.Item.OneOf_Data?
    var _thumbnail: Sonrio_Motor_Service_V1_Thumbnail? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mime = source._mime
      _size = source._size
      _data = source._data
      _thumbnail = source._thumbnail
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._mime) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._size) }()
        case 3: try {
          var v: Sonrio_Motor_Service_V1_FileItem?
          var hadOneofValue = false
          if let current = _storage._data {
            hadOneofValue = true
            if case .file(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._data = .file(v)
          }
        }()
        case 4: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {
            if _storage._data != nil {try decoder.handleConflictingOneOf()}
            _storage._data = .url(v)
          }
        }()
        case 5: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {
            if _storage._data != nil {try decoder.handleConflictingOneOf()}
            _storage._data = .message(v)
          }
        }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._thumbnail) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._mime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._size != 0 {
        try visitor.visitSingularInt64Field(value: _storage._size, fieldNumber: 2)
      }
      switch _storage._data {
      case .file?: try {
        guard case .file(let v)? = _storage._data else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .url?: try {
        guard case .url(let v)? = _storage._data else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }()
      case .message?: try {
        guard case .message(let v)? = _storage._data else { preconditionFailure() }
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }()
      case nil: break
      }
      try { if let v = _storage._thumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Service_V1_Payload.Item, rhs: Sonrio_Motor_Service_V1_Payload.Item) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mime != rhs_storage._mime {return false}
        if _storage._size != rhs_storage._size {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._thumbnail != rhs_storage._thumbnail {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Service_V1_SupplyItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SupplyItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "thumbnail"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._thumbnail) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._thumbnail {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Service_V1_SupplyItem, rhs: Sonrio_Motor_Service_V1_SupplyItem) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._thumbnail != rhs._thumbnail {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Service_V1_Thumbnail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Thumbnail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buffer"),
    2: .same(proto: "mime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.buffer) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._mime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.buffer.isEmpty {
      try visitor.visitSingularBytesField(value: self.buffer, fieldNumber: 1)
    }
    try { if let v = self._mime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Service_V1_Thumbnail, rhs: Sonrio_Motor_Service_V1_Thumbnail) -> Bool {
    if lhs.buffer != rhs.buffer {return false}
    if lhs._mime != rhs._mime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Service_V1_Session: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Session"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .same(proto: "from"),
    3: .same(proto: "to"),
    4: .same(proto: "payload"),
    5: .standard(proto: "last_updated"),
    6: .same(proto: "items"),
    7: .standard(proto: "current_index"),
    8: .same(proto: "results"),
  ]

  fileprivate class _StorageClass {
    var _direction: Sonrio_Motor_Common_V1_Direction = .unspecified
    var _from: Sonrio_Motor_Common_V1_Peer? = nil
    var _to: Sonrio_Motor_Common_V1_Peer? = nil
    var _payload: Sonrio_Motor_Service_V1_Payload? = nil
    var _lastUpdated: Int64 = 0
    var _items: [Sonrio_Motor_Service_V1_SessionItem] = []
    var _currentIndex: Int32 = 0
    var _results: Dictionary<Int32,Bool> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _direction = source._direction
      _from = source._from
      _to = source._to
      _payload = source._payload
      _lastUpdated = source._lastUpdated
      _items = source._items
      _currentIndex = source._currentIndex
      _results = source._results
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._direction) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._from) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._to) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._payload) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._lastUpdated) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._items) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._currentIndex) }()
        case 8: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBool>.self, value: &_storage._results) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._direction != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._direction, fieldNumber: 1)
      }
      try { if let v = _storage._from {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._to {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._lastUpdated != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastUpdated, fieldNumber: 5)
      }
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 6)
      }
      if _storage._currentIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._currentIndex, fieldNumber: 7)
      }
      if !_storage._results.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufBool>.self, value: _storage._results, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Service_V1_Session, rhs: Sonrio_Motor_Service_V1_Session) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._direction != rhs_storage._direction {return false}
        if _storage._from != rhs_storage._from {return false}
        if _storage._to != rhs_storage._to {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._lastUpdated != rhs_storage._lastUpdated {return false}
        if _storage._items != rhs_storage._items {return false}
        if _storage._currentIndex != rhs_storage._currentIndex {return false}
        if _storage._results != rhs_storage._results {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Service_V1_SessionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "count"),
    3: .same(proto: "item"),
    4: .same(proto: "written"),
    5: .same(proto: "size"),
    6: .standard(proto: "total_size"),
    7: .same(proto: "direction"),
    8: .same(proto: "path"),
  ]

  fileprivate class _StorageClass {
    var _index: Int32 = 0
    var _count: Int32 = 0
    var _item: Sonrio_Motor_Service_V1_FileItem? = nil
    var _written: Int64 = 0
    var _size: Int64 = 0
    var _totalSize: Int64 = 0
    var _direction: Sonrio_Motor_Common_V1_Direction = .unspecified
    var _path: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _index = source._index
      _count = source._count
      _item = source._item
      _written = source._written
      _size = source._size
      _totalSize = source._totalSize
      _direction = source._direction
      _path = source._path
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._index) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._count) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._item) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._written) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._size) }()
        case 6: try { try decoder.decodeSingularInt64Field(value: &_storage._totalSize) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._direction) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._path) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._index != 0 {
        try visitor.visitSingularInt32Field(value: _storage._index, fieldNumber: 1)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 2)
      }
      try { if let v = _storage._item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._written != 0 {
        try visitor.visitSingularInt64Field(value: _storage._written, fieldNumber: 4)
      }
      if _storage._size != 0 {
        try visitor.visitSingularInt64Field(value: _storage._size, fieldNumber: 5)
      }
      if _storage._totalSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalSize, fieldNumber: 6)
      }
      if _storage._direction != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._direction, fieldNumber: 7)
      }
      if !_storage._path.isEmpty {
        try visitor.visitSingularStringField(value: _storage._path, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Service_V1_SessionItem, rhs: Sonrio_Motor_Service_V1_SessionItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._index != rhs_storage._index {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._item != rhs_storage._item {return false}
        if _storage._written != rhs_storage._written {return false}
        if _storage._size != rhs_storage._size {return false}
        if _storage._totalSize != rhs_storage._totalSize {return false}
        if _storage._direction != rhs_storage._direction {return false}
        if _storage._path != rhs_storage._path {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sonrio_Motor_Service_V1_SessionPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "direction"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._payload) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.direction != .unspecified {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sonrio_Motor_Service_V1_SessionPayload, rhs: Sonrio_Motor_Service_V1_SessionPayload) -> Bool {
    if lhs._payload != rhs._payload {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
